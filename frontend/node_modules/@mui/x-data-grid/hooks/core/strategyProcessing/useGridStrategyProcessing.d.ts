import * as React from 'react';
import { GridApiCommunity } from '../../../models/api/gridApiCommunity';
import { GridStrategyProcessorName, GridStrategyProcessingLookup } from './gridStrategyProcessingApi';
export declare const GRID_DEFAULT_STRATEGY = "none";
export declare const GRID_STRATEGIES_PROCESSORS: {
    [P in GridStrategyProcessorName]: GridStrategyProcessingLookup[P]['group'];
};
/**
 * Implements a variant of the Strategy Pattern (see https://en.wikipedia.org/wiki/Strategy_pattern)
 *
 * Some plugins contain custom logic that must only be run if the right strategy is active.
 * For instance, the tree data plugin has:
 * - custom row tree creation algorithm.
 * - custom sorting algorithm.
 * - custom filtering algorithm.
 *
 * These plugins must use:
 * - `apiRef.current.unstable_registerStrategyProcessor` to register their processors.
 * - `apiRef.current.unstable_setStrategyAvailability` to tell if their strategy can be used.
 *
 * Some hooks need to run the custom logic of the active strategy.
 * For instance, the `useGridFiltering` wants to run:
 * - the tree data filtering if the tree data is the current way of grouping rows.
 * - the row grouping filtering if the row grouping is the current way of grouping rows.
 * - the flat filtering if there is no grouping of the rows (equivalent to the "none" strategy).
 *
 * These hooks must use:
 * - `apiRef.current.unstable_applyStrategyProcessor` to run a processor.
 * - `GridEvents.strategyAvailabilityChange` to update something when the active strategy changes.
 *    Warning: Be careful not to apply the processor several times.
 *    For instance `GridEvents.rowsSet` is fired by `useGridRows` whenever the active strategy changes.
 *    So listening to both would most likely run your logic twice.
 * - `GridEvents.activeStrategyProcessorChange` to update something when the processor of the active strategy changes
 *
 * Each processor name is part of a strategy group which can only have one active strategy at the time.
 */
export declare const useGridStrategyProcessing: (apiRef: React.MutableRefObject<GridApiCommunity>) => void;
