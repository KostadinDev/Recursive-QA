{"ast":null,"code":"import _asyncToGenerator from \"/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@babel/runtime/regenerator/index.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { GridRowModes, GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nexport var useGridRowEditing = function useGridRowEditing(apiRef, props) {\n  var _props$experimentalFe2, _props$experimentalFe4;\n\n  var focusTimeout = React.useRef(null);\n  var nextFocusedCell = React.useRef(null);\n  var columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);\n\n  var buildCallback = function buildCallback(callback) {\n    return function () {\n      if (props.editMode === GridEditModes.Row) {\n        callback.apply(void 0, arguments);\n      }\n    };\n  };\n\n  var setRowMode = React.useCallback(function (id, mode) {\n    if (mode === apiRef.current.getRowMode(id)) {\n      return;\n    }\n\n    apiRef.current.setState(function (state) {\n      var newEditRowsState = _extends({}, state.editRows);\n\n      if (mode === GridRowModes.Edit) {\n        newEditRowsState[id] = {};\n        columns.forEach(function (column) {\n          var cellParams = apiRef.current.getCellParams(id, column.field);\n\n          if (cellParams.isEditable) {\n            newEditRowsState[id][column.field] = {\n              value: cellParams.value\n            };\n          }\n        });\n      } else {\n        delete newEditRowsState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, columns]);\n  var getRowMode = React.useCallback(function (id) {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    var editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    return editRowsState[id] ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  var commitRowChange = React.useCallback(function (id) {\n    var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _props$experimentalFe;\n\n    if (props.editMode === GridEditModes.Cell) {\n      throw new Error(\"MUI: You can't commit changes when the edit mode is 'cell'.\");\n    }\n\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    var model = apiRef.current.getEditRowsModel();\n    var editRowProps = model[id];\n\n    if (!editRowProps) {\n      throw new Error(\"MUI: Row at id: \".concat(id, \" is not being edited.\"));\n    }\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      var isValid = Object.keys(editRowProps).reduce(function (acc, field) {\n        return acc && !editRowProps[field].isValidating && !editRowProps[field].error;\n      }, true);\n\n      if (!isValid) {\n        return false;\n      }\n    }\n\n    var hasFieldWithError = Object.values(editRowProps).some(function (value) {\n      return !!value.error;\n    });\n\n    if (hasFieldWithError) {\n      return false;\n    }\n\n    var fieldsWithValidator = Object.keys(editRowProps).filter(function (field) {\n      var column = apiRef.current.getColumn(field);\n      return typeof column.preProcessEditCellProps === 'function';\n    });\n\n    if (fieldsWithValidator.length > 0) {\n      var row = apiRef.current.getRow(id);\n      var validatorErrors = fieldsWithValidator.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(field) {\n          var column, newEditCellProps;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  column = apiRef.current.getColumn(field);\n                  _context.next = 3;\n                  return Promise.resolve(column.preProcessEditCellProps({\n                    id: id,\n                    row: row,\n                    props: editRowProps[field]\n                  }));\n\n                case 3:\n                  newEditCellProps = _context.sent;\n                  apiRef.current.unstable_setEditCellProps({\n                    id: id,\n                    field: field,\n                    props: newEditCellProps\n                  });\n                  return _context.abrupt(\"return\", newEditCellProps.error);\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      return Promise.all(validatorErrors).then(function (errors) {\n        if (errors.some(function (error) {\n          return !!error;\n        })) {\n          return false;\n        }\n\n        apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n        return true;\n      });\n    }\n\n    apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n    return true;\n  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  var setRowEditingEditCellValue = React.useCallback(function (params) {\n    var model = apiRef.current.getEditRowsModel();\n    var editRow = model[params.id];\n    var row = apiRef.current.getRow(params.id);\n    var isValid = true;\n    return new Promise(function (resolve) {\n      Object.keys(editRow).forEach( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(field) {\n          var column, editCellProps;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  column = apiRef.current.getColumn(field);\n                  editCellProps = field === params.field ? {\n                    value: params.value\n                  } : editRow[field]; // setEditCellProps runs the value parser and returns the updated props\n\n                  editCellProps = apiRef.current.unstable_setEditCellProps({\n                    id: params.id,\n                    field: field,\n                    props: _extends({}, editCellProps, {\n                      isValidating: true\n                    })\n                  });\n\n                  if (!column.preProcessEditCellProps) {\n                    _context2.next = 7;\n                    break;\n                  }\n\n                  _context2.next = 6;\n                  return Promise.resolve(column.preProcessEditCellProps({\n                    id: params.id,\n                    row: row,\n                    props: _extends({}, editCellProps, {\n                      value: field === params.field ? apiRef.current.unstable_parseValue(params.id, field, params.value) : editCellProps.value\n                    })\n                  }));\n\n                case 6:\n                  editCellProps = _context2.sent;\n\n                case 7:\n                  if (editCellProps.error) {\n                    isValid = false;\n                  }\n\n                  apiRef.current.unstable_setEditCellProps({\n                    id: params.id,\n                    field: field,\n                    props: _extends({}, editCellProps, {\n                      isValidating: false\n                    })\n                  });\n\n                case 9:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      resolve(isValid);\n    });\n  }, [apiRef]);\n  var rowEditingApi = {\n    setRowMode: setRowMode,\n    getRowMode: getRowMode,\n    commitRowChange: commitRowChange,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, rowEditingApi, 'EditRowApi');\n  var handleCellKeyDown = React.useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params, event) {\n      var cellMode, isEditable, isEditMode, rowParams, _props$experimentalFe3, isValid;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              cellMode = params.cellMode, isEditable = params.isEditable;\n\n              if (isEditable) {\n                _context3.next = 3;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 3:\n              isEditMode = cellMode === GridCellModes.Edit;\n              rowParams = apiRef.current.getRowParams(params.id);\n\n              if (!isEditMode) {\n                _context3.next = 18;\n                break;\n              }\n\n              if (!(event.key === 'Enter')) {\n                _context3.next = 15;\n                break;\n              }\n\n              _context3.next = 9;\n              return apiRef.current.commitRowChange(params.id);\n\n            case 9:\n              isValid = _context3.sent;\n\n              if (!(!isValid && (_props$experimentalFe3 = props.experimentalFeatures) != null && _props$experimentalFe3.preventCommitWhileValidating)) {\n                _context3.next = 12;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 12:\n              apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n              _context3.next = 16;\n              break;\n\n            case 15:\n              if (event.key === 'Escape') {\n                apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n              }\n\n            case 16:\n              _context3.next = 19;\n              break;\n\n            case 18:\n              if (event.key === 'Enter') {\n                apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n              }\n\n            case 19:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [apiRef, (_props$experimentalFe4 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe4.preventCommitWhileValidating]);\n  var handleCellDoubleClick = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n\n    var rowParams = apiRef.current.getRowParams(params.id);\n    apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n  }, [apiRef]);\n  var handleEditCellPropsChange = React.useCallback(function (params) {\n    var row = apiRef.current.getRow(params.id);\n    var model = apiRef.current.getEditRowsModel();\n    var editRow = model[params.id];\n    Object.keys(editRow).forEach( /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(field) {\n        var column, editCellProps, newEditCellProps;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                column = apiRef.current.getColumn(field);\n\n                if (!column.preProcessEditCellProps) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                editCellProps = field === params.field ? params.props : editRow[field];\n                _context4.next = 5;\n                return Promise.resolve(column.preProcessEditCellProps({\n                  id: params.id,\n                  row: row,\n                  props: editCellProps\n                }));\n\n              case 5:\n                newEditCellProps = _context4.sent;\n                apiRef.current.unstable_setEditCellProps({\n                  id: params.id,\n                  field: field,\n                  props: newEditCellProps\n                });\n                _context4.next = 10;\n                break;\n\n              case 9:\n                if (field === params.field) {\n                  apiRef.current.unstable_setEditCellProps(params);\n                }\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x5) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  }, [apiRef]);\n  var handleRowEditStart = React.useCallback(function (params) {\n    apiRef.current.setRowMode(params.id, GridRowModes.Edit);\n  }, [apiRef]);\n  var handleRowEditStop = React.useCallback(function (params, event) {\n    apiRef.current.setRowMode(params.id, GridRowModes.View);\n\n    if (event.key === 'Enter') {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n    }\n  }, [apiRef]);\n  var handleRowEditCommit = React.useCallback(function (id) {\n    var model = apiRef.current.getEditRowsModel();\n    var editRow = model[id];\n\n    if (!editRow) {\n      throw new Error(\"MUI: Row at id: \".concat(id, \" is not being edited.\"));\n    }\n\n    var row = apiRef.current.getRow(id);\n\n    if (row) {\n      var rowUpdate = _extends({}, row);\n\n      Object.keys(editRow).forEach(function (field) {\n        var column = apiRef.current.getColumn(field);\n        var value = editRow[field].value;\n\n        if (column.valueSetter) {\n          rowUpdate = column.valueSetter({\n            row: rowUpdate,\n            value: value\n          });\n        } else {\n          rowUpdate[field] = value;\n        }\n      });\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef]);\n  var handleCellFocusIn = React.useCallback(function (params) {\n    nextFocusedCell.current = params;\n  }, []);\n\n  var commitPropsAndExit = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(params, event) {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(params.cellMode === GridCellModes.View)) {\n                _context6.next = 2;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 2:\n              nextFocusedCell.current = null;\n              focusTimeout.current = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n                var _nextFocusedCell$curr, rowParams;\n\n                return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        if (!(((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id)) {\n                          _context5.next = 5;\n                          break;\n                        }\n\n                        _context5.next = 3;\n                        return apiRef.current.commitRowChange(params.id, event);\n\n                      case 3:\n                        rowParams = apiRef.current.getRowParams(params.id);\n                        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n\n                      case 5:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee5);\n              })));\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function commitPropsAndExit(_x6, _x7) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var handleCellFocusOut = useEventCallback(function (params, event) {\n    commitPropsAndExit(params, event);\n  });\n  var handleColumnHeaderDragStart = useEventCallback(function () {\n    var cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    var params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.editCellPropsChange, buildCallback(handleEditCellPropsChange));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStart, buildCallback(handleRowEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStop, buildCallback(handleRowEditStop));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditCommit, buildCallback(handleRowEditCommit));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, buildCallback(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, buildCallback(handleColumnHeaderDragStart));\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditCommit, props.onRowEditCommit);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);\n};","map":{"version":3,"sources":["/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.old.js"],"names":["_extends","React","useEventCallback","useGridApiMethod","GridRowModes","GridEditModes","GridCellModes","useGridSelector","gridColumnDefinitionsSelector","gridEditRowsStateSelector","GridEvents","gridFocusCellSelector","useGridApiOptionHandler","useGridApiEventHandler","useGridRowEditing","apiRef","props","_props$experimentalFe2","_props$experimentalFe4","focusTimeout","useRef","nextFocusedCell","columns","buildCallback","callback","editMode","Row","setRowMode","useCallback","id","mode","current","getRowMode","setState","state","newEditRowsState","editRows","Edit","forEach","column","cellParams","getCellParams","field","isEditable","value","forceUpdate","Cell","View","editRowsState","commitRowChange","event","_props$experimentalFe","Error","unstable_runPendingEditCellValueMutation","model","getEditRowsModel","editRowProps","experimentalFeatures","preventCommitWhileValidating","isValid","Object","keys","reduce","acc","isValidating","error","hasFieldWithError","values","some","fieldsWithValidator","filter","getColumn","preProcessEditCellProps","length","row","getRow","validatorErrors","map","Promise","resolve","newEditCellProps","unstable_setEditCellProps","all","then","errors","publishEvent","rowEditCommit","setRowEditingEditCellValue","params","editRow","editCellProps","unstable_parseValue","rowEditingApi","unstable_setRowEditingEditCellValue","handleCellKeyDown","cellMode","isEditMode","rowParams","getRowParams","key","_props$experimentalFe3","rowEditStop","rowEditStart","handleCellDoubleClick","handleEditCellPropsChange","handleRowEditStart","handleRowEditStop","cellNavigationKeyDown","handleRowEditCommit","rowUpdate","valueSetter","updateRows","handleCellFocusIn","commitPropsAndExit","setTimeout","_nextFocusedCell$curr","handleCellFocusOut","handleColumnHeaderDragStart","cell","cellKeyDown","cellDoubleClick","editCellPropsChange","cellFocusIn","cellFocusOut","columnHeaderDragStart","onRowEditCommit","onRowEditStart","onRowEditStop"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { GridRowModes, GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nexport const useGridRowEditing = (apiRef, props) => {\n  var _props$experimentalFe2, _props$experimentalFe4;\n\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);\n\n  const buildCallback = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const setRowMode = React.useCallback((id, mode) => {\n    if (mode === apiRef.current.getRowMode(id)) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      if (mode === GridRowModes.Edit) {\n        newEditRowsState[id] = {};\n        columns.forEach(column => {\n          const cellParams = apiRef.current.getCellParams(id, column.field);\n\n          if (cellParams.isEditable) {\n            newEditRowsState[id][column.field] = {\n              value: cellParams.value\n            };\n          }\n        });\n      } else {\n        delete newEditRowsState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, columns]);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    return editRowsState[id] ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const commitRowChange = React.useCallback((id, event = {}) => {\n    var _props$experimentalFe;\n\n    if (props.editMode === GridEditModes.Cell) {\n      throw new Error(`MUI: You can't commit changes when the edit mode is 'cell'.`);\n    }\n\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRowProps = model[id];\n\n    if (!editRowProps) {\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\n    }\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const isValid = Object.keys(editRowProps).reduce((acc, field) => {\n        return acc && !editRowProps[field].isValidating && !editRowProps[field].error;\n      }, true);\n\n      if (!isValid) {\n        return false;\n      }\n    }\n\n    const hasFieldWithError = Object.values(editRowProps).some(value => !!value.error);\n\n    if (hasFieldWithError) {\n      return false;\n    }\n\n    const fieldsWithValidator = Object.keys(editRowProps).filter(field => {\n      const column = apiRef.current.getColumn(field);\n      return typeof column.preProcessEditCellProps === 'function';\n    });\n\n    if (fieldsWithValidator.length > 0) {\n      const row = apiRef.current.getRow(id);\n      const validatorErrors = fieldsWithValidator.map(async field => {\n        const column = apiRef.current.getColumn(field);\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: editRowProps[field]\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id,\n          field,\n          props: newEditCellProps\n        });\n        return newEditCellProps.error;\n      });\n      return Promise.all(validatorErrors).then(errors => {\n        if (errors.some(error => !!error)) {\n          return false;\n        }\n\n        apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n        return true;\n      });\n    }\n\n    apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n    return true;\n  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    const row = apiRef.current.getRow(params.id);\n    let isValid = true;\n    return new Promise(resolve => {\n      Object.keys(editRow).forEach(async field => {\n        const column = apiRef.current.getColumn(field);\n        let editCellProps = field === params.field ? {\n          value: params.value\n        } : editRow[field]; // setEditCellProps runs the value parser and returns the updated props\n\n        editCellProps = apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: true\n          })\n        });\n\n        if (column.preProcessEditCellProps) {\n          editCellProps = await Promise.resolve(column.preProcessEditCellProps({\n            id: params.id,\n            row,\n            props: _extends({}, editCellProps, {\n              value: field === params.field ? apiRef.current.unstable_parseValue(params.id, field, params.value) : editCellProps.value\n            })\n          }));\n        }\n\n        if (editCellProps.error) {\n          isValid = false;\n        }\n\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: false\n          })\n        });\n      });\n      resolve(isValid);\n    });\n  }, [apiRef]);\n  const rowEditingApi = {\n    setRowMode,\n    getRowMode,\n    commitRowChange,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, rowEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    const {\n      cellMode,\n      isEditable\n    } = params;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    if (isEditMode) {\n      if (event.key === 'Enter') {\n        var _props$experimentalFe3;\n\n        // TODO: check the return before firing GridEvents.rowEditStop\n        // On cell editing, it won't exits the edit mode with error\n        const isValid = await apiRef.current.commitRowChange(params.id);\n\n        if (!isValid && (_props$experimentalFe3 = props.experimentalFeatures) != null && _props$experimentalFe3.preventCommitWhileValidating) {\n          return;\n        }\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      } else if (event.key === 'Escape') {\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      }\n    } else if (event.key === 'Enter') {\n      apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n    }\n  }, [apiRef, (_props$experimentalFe4 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe4.preventCommitWhileValidating]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n    apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n  }, [apiRef]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    Object.keys(editRow).forEach(async field => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.preProcessEditCellProps) {\n        const editCellProps = field === params.field ? params.props : editRow[field];\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id: params.id,\n          row,\n          props: editCellProps\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: newEditCellProps\n        });\n      } else if (field === params.field) {\n        apiRef.current.unstable_setEditCellProps(params);\n      }\n    });\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    apiRef.current.setRowMode(params.id, GridRowModes.Edit);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback((params, event) => {\n    apiRef.current.setRowMode(params.id, GridRowModes.View);\n\n    if (event.key === 'Enter') {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n    }\n  }, [apiRef]);\n  const handleRowEditCommit = React.useCallback(id => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[id];\n\n    if (!editRow) {\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\n    }\n\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      let rowUpdate = _extends({}, row);\n\n      Object.keys(editRow).forEach(field => {\n        const column = apiRef.current.getColumn(field);\n        const value = editRow[field].value;\n\n        if (column.valueSetter) {\n          rowUpdate = column.valueSetter({\n            row: rowUpdate,\n            value\n          });\n        } else {\n          rowUpdate[field] = value;\n        }\n      });\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(async () => {\n      var _nextFocusedCell$curr;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        await apiRef.current.commitRowChange(params.id, event);\n        const rowParams = apiRef.current.getRowParams(params.id);\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      }\n    });\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.editCellPropsChange, buildCallback(handleEditCellPropsChange));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStart, buildCallback(handleRowEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStop, buildCallback(handleRowEditStop));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditCommit, buildCallback(handleRowEditCommit));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, buildCallback(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, buildCallback(handleColumnHeaderDragStart));\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditCommit, props.onRowEditCommit);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);\n};"]},"metadata":{},"sourceType":"module"}