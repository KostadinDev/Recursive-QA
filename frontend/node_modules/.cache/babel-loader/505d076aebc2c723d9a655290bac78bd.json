{"ast":null,"code":"import _slicedToArray from\"/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import*as React from'react';import Accordion from'@mui/material/Accordion';import AccordionDetails from'@mui/material/AccordionDetails';import AccordionSummary from'@mui/material/AccordionSummary';import Typography from'@mui/material/Typography';import ExpandMoreIcon from'@mui/icons-material/ExpandMore';import'./history.styles.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function HistoryAccordion(props){var _ref=[props.history,props.setHistory],history=_ref[0],setHistory=_ref[1];var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),expanded=_React$useState2[0],setExpanded=_React$useState2[1];var questions=['What if it '];var handleChange=function handleChange(panel){return function(event,isExpanded){setExpanded(isExpanded?panel:false);};};function formatText(text){var sbar=text.toLowerCase().includes(\"if \")?true:false;var question=sbar?\"What happens \":\"What \";return question+text.toLowerCase();}return/*#__PURE__*/_jsx(\"div\",{className:\"history-accordion\",children:history?history.map(function(qa){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Accordion,{expanded:expanded===qa['segment'],onChange:handleChange(qa['segment']),sx:{backgroundColor:\"rgb(10, 25, 41)\",borderBottom:'1px solid grey',borderRadius:'5px',borderColor:'#5090D3',width:\"100%\"},children:[/*#__PURE__*/_jsxs(AccordionSummary,{expandIcon:/*#__PURE__*/_jsx(ExpandMoreIcon,{}),\"aria-controls\":\"panel1bh-content\",id:\"panel1bh-header\",sx:{backgroundColor:\"rgb(10, 25, 41)\",borderRadius:5,width:'100%',justifyContent:\"unset\"},className:\"accordion-summary\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"accordion-column\",children:\"Q: \"+formatText(qa['question'])}),/*#__PURE__*/_jsx(\"div\",{className:\"accordion-column\",children:\"A: \"+qa['answer']})]}),/*#__PURE__*/_jsxs(AccordionDetails,{sx:{backgroundColor:\"rgb(10, 25, 41)\",borderRadius:5,width:'100%',justifyContent:\"unset\"},children:[/*#__PURE__*/_jsx(\"div\",{className:\"accordion-details\",children:qa['segment']+\": segment\"}),/*#__PURE__*/_jsx(\"div\",{className:\"accordion-details\",children:qa['question']+\": {span type}\"}),/*#__PURE__*/_jsx(\"div\",{className:\"accordion-details\",children:qa['answer']+\": {span type}\"}),/*#__PURE__*/_jsx(\"div\",{className:\"accordion-details\",children:\"Relation: {relation type}\"})]})]},qa['segment'])});}):\"none\"});}","map":{"version":3,"sources":["/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/src/History/HistoryAccordion.js"],"names":["React","Accordion","AccordionDetails","AccordionSummary","Typography","ExpandMoreIcon","HistoryAccordion","props","history","setHistory","useState","expanded","setExpanded","questions","handleChange","panel","event","isExpanded","formatText","text","sbar","toLowerCase","includes","question","map","qa","backgroundColor","borderBottom","borderRadius","borderColor","width","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport './history.styles.css'\n\nexport default function HistoryAccordion(props) {\n    const [history, setHistory] = [props.history, props.setHistory];\n    const [expanded, setExpanded] = React.useState(false);\n    const questions = ['What if it ']\n    const handleChange = (panel) => (event, isExpanded) => {\n        setExpanded(isExpanded ? panel : false);\n    };\n\n    function formatText(text) {\n        const sbar = text.toLowerCase().includes(\"if \") ? true : false;\n        const question = sbar ? \"What happens \" : \"What \"\n        return question + text.toLowerCase();\n    }\n\n    return (\n        <div className=\"history-accordion\">\n            {\n                history ? history.map((qa) => {\n                    return <>\n                        <Accordion key={qa['segment']} expanded={expanded === qa['segment']}\n                                   onChange={handleChange(qa['segment'])} sx={{\n                            backgroundColor: \"rgb(10, 25, 41)\",\n                            borderBottom: '1px solid grey',\n                            borderRadius: '5px',\n                            borderColor: '#5090D3',\n                            width: \"100%\",\n                        }}>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon/>}\n                                aria-controls=\"panel1bh-content\"\n                                id=\"panel1bh-header\"\n                                sx={{\n                                    backgroundColor: \"rgb(10, 25, 41)\",\n                                    borderRadius: 5,\n                                    width: '100%',\n                                    justifyContent: \"unset\"\n                                }}\n                                className=\"accordion-summary\"\n                            >\n                                <div className=\"accordion-column\">{\"Q: \" + formatText(qa['question'])}</div>\n                                <div className=\"accordion-column\">{\"A: \" + qa['answer']}</div>\n\n                                {/*<Typography sx={{color: \"white\", width: '50%'}}>*/}\n                                {/*    {\"Q: \" + formatText(qa['question'])}*/}\n                                {/*</Typography>*/}\n                                {/*<Typography sx={{color: 'white', width: '50%'}}>{\"A: \" + qa['answer']}</Typography>*/}\n                            </AccordionSummary>\n                            <AccordionDetails sx={{\n                                backgroundColor: \"rgb(10, 25, 41)\",\n                                borderRadius: 5,\n                                width: '100%',\n                                justifyContent: \"unset\"\n                            }}>\n                                <div className='accordion-details'>{qa['segment'] + \": segment\"}</div>\n                                <div className='accordion-details'>{ qa['question'] + \": {span type}\"}</div>\n                                <div className='accordion-details'>{qa['answer'] + \": {span type}\"}</div>\n                                <div className='accordion-details'>{\"Relation: {relation type}\"}</div>\n\n                                {/*<Typography sx={{color: 'white', width: '100%'}}>*/}\n                                {/*    {\"S: \" + qa['segment']}*/}\n                                {/*</Typography>*/}\n                            </AccordionDetails>\n                        </Accordion></>\n\n                }) : \"none\"\n            }\n\n\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}