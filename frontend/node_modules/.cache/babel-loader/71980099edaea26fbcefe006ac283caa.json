{"ast":null,"code":"import _toConsumableArray from \"/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsMetaSelector, gridColumnsSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\nimport { hydrateColumnsWidth, computeColumnTypes, createColumnsState, mergeColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var columnsStateInitializer = function columnsStateInitializer(state, props, apiRef) {\n  var _props$initialState, _props$initialState$c, _props$initialState2, _ref, _props$columnVisibili, _props$initialState3, _props$initialState3$;\n\n  var isUsingColumnVisibilityModel = !!props.columnVisibilityModel || !!((_props$initialState = props.initialState) != null && (_props$initialState$c = _props$initialState.columns) != null && _props$initialState$c.columnVisibilityModel);\n  var columnsTypes = computeColumnTypes(props.columnTypes);\n  var columnsState = createColumnsState({\n    apiRef: apiRef,\n    columnsTypes: columnsTypes,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.columns,\n    shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n    currentColumnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState\n  });\n};\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\n\nexport function useGridColumns(apiRef, props) {\n  var _props$initialState4, _props$initialState4$, _props$componentsProp2;\n\n  var logger = useGridLogger(apiRef, 'useGridColumns');\n  var columnsTypes = React.useMemo(function () {\n    return computeColumnTypes(props.columnTypes);\n  }, [props.columnTypes]);\n  /**\n   * If `initialState.columns.columnVisibilityModel` or `columnVisibilityModel` was defined during the 1st render, we are directly updating the model\n   * If not, we keep the old behavior and update the `GridColDef.hide` option (which will update the state model through the `GridColDef.hide` => `columnVisibilityModel` sync in `createColumnsState`\n   */\n\n  var isUsingColumnVisibilityModel = React.useRef(!!props.columnVisibilityModel || !!((_props$initialState4 = props.initialState) != null && (_props$initialState4$ = _props$initialState4.columns) != null && _props$initialState4$.columnVisibilityModel)).current;\n  apiRef.current.unstable_updateControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: GridEvents.columnVisibilityModelChange\n  });\n  var setGridColumnsState = React.useCallback(function (columnsState) {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent(GridEvents.columnsChange, columnsState.all);\n  }, [logger, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  var getColumn = React.useCallback(function (field) {\n    return gridColumnLookupSelector(apiRef)[field];\n  }, [apiRef]);\n  var getAllColumns = React.useCallback(function () {\n    return gridColumnDefinitionsSelector(apiRef);\n  }, [apiRef]);\n  var getVisibleColumns = React.useCallback(function () {\n    return gridVisibleColumnDefinitionsSelector(apiRef);\n  }, [apiRef]);\n  var getColumnsMeta = React.useCallback(function () {\n    return gridColumnsMetaSelector(apiRef);\n  }, [apiRef]);\n  var getColumnIndex = React.useCallback(function (field) {\n    var useVisibleColumns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(function (col) {\n      return col.field === field;\n    });\n  }, [apiRef]);\n  var getColumnPosition = React.useCallback(function (field) {\n    var index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  var setColumnVisibilityModel = React.useCallback(function (model) {\n    var currentModel = gridColumnVisibilityModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(function (state) {\n        return _extends({}, state, {\n          columns: createColumnsState({\n            apiRef: apiRef,\n            columnsTypes: columnsTypes,\n            columnsToUpsert: [],\n            initialState: undefined,\n            shouldRegenColumnVisibilityModelFromColumns: false,\n            currentColumnVisibilityModel: model,\n            keepOnlyColumnsToUpsert: false\n          })\n        });\n      });\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, columnsTypes]);\n  var updateColumns = React.useCallback(function (columns) {\n    var columnsState = createColumnsState({\n      apiRef: apiRef,\n      columnsTypes: columnsTypes,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: true,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState, columnsTypes]);\n  var updateColumn = React.useCallback(function (column) {\n    return apiRef.current.updateColumns([column]);\n  }, [apiRef]);\n  var setColumnVisibility = React.useCallback(function (field, isVisible) {\n    // We keep updating the `hide` option of `GridColDef` when not controlling the model to avoid any breaking change.\n    // `updateColumns` take care of updating the model itself if needs be.\n    // TODO v6: stop using the `hide` field even when the model is not defined\n    if (isUsingColumnVisibilityModel) {\n      var _columnVisibilityMode;\n\n      var columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n      var isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;\n\n      if (isVisible !== isCurrentlyVisible) {\n        var newModel = _extends({}, columnVisibilityModel, _defineProperty({}, field, isVisible));\n\n        apiRef.current.setColumnVisibilityModel(newModel);\n      }\n    } else {\n      var column = apiRef.current.getColumn(field);\n\n      var newColumn = _extends({}, column, {\n        hide: !isVisible\n      });\n\n      apiRef.current.updateColumns([newColumn]);\n      var params = {\n        field: field,\n        colDef: newColumn,\n        isVisible: isVisible\n      };\n      apiRef.current.publishEvent(GridEvents.columnVisibilityChange, params);\n    }\n  }, [apiRef, isUsingColumnVisibilityModel]);\n  var setColumnIndex = React.useCallback(function (field, targetIndexPosition) {\n    var allColumns = gridColumnFieldsSelector(apiRef);\n    var oldIndexPosition = allColumns.findIndex(function (col) {\n      return col === field;\n    });\n\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n\n    logger.debug(\"Moving column \".concat(field, \" to index \").concat(targetIndexPosition));\n\n    var updatedColumns = _toConsumableArray(allColumns);\n\n    updatedColumns.splice(targetIndexPosition, 0, updatedColumns.splice(oldIndexPosition, 1)[0]);\n    setGridColumnsState(_extends({}, gridColumnsSelector(apiRef.current.state), {\n      all: updatedColumns\n    }));\n    var params = {\n      field: field,\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: apiRef.current.getColumn(field),\n      targetIndex: targetIndexPosition,\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent(GridEvents.columnOrderChange, params);\n  }, [apiRef, logger, setGridColumnsState]);\n  var setColumnWidth = React.useCallback(function (field, width) {\n    logger.debug(\"Updating column \".concat(field, \" width to \").concat(width));\n    var column = apiRef.current.getColumn(field);\n\n    var newColumn = _extends({}, column, {\n      width: width\n    });\n\n    apiRef.current.updateColumns([newColumn]);\n    apiRef.current.publishEvent(GridEvents.columnWidthChange, {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width: width\n    });\n  }, [apiRef, logger]);\n  var columnApi = {\n    getColumn: getColumn,\n    getAllColumns: getAllColumns,\n    getColumnIndex: getColumnIndex,\n    getColumnPosition: getColumnPosition,\n    getVisibleColumns: getVisibleColumns,\n    getColumnsMeta: getColumnsMeta,\n    updateColumn: updateColumn,\n    updateColumns: updateColumns,\n    setColumnVisibilityModel: setColumnVisibilityModel,\n    setColumnVisibility: setColumnVisibility,\n    setColumnIndex: setColumnIndex,\n    setColumnWidth: setColumnWidth\n  };\n  useGridApiMethod(apiRef, columnApi, 'GridColumnApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  var stateExportPreProcessing = React.useCallback(function (prevState) {\n    var columnsStateToExport = {};\n\n    if (isUsingColumnVisibilityModel) {\n      var columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n      var hasHiddenColumns = Object.values(columnVisibilityModelToExport).some(function (value) {\n        return value === false;\n      });\n\n      if (hasHiddenColumns) {\n        columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n      }\n    }\n\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    var columns = gridColumnDefinitionsSelector(apiRef);\n    var dimensions = {};\n    columns.forEach(function (colDef) {\n      if (colDef.hasBeenResized) {\n        var colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(function (propertyName) {\n          colDefDimensions[propertyName] = colDef[propertyName];\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, isUsingColumnVisibilityModel]);\n  var stateRestorePreProcessing = React.useCallback(function (params, context) {\n    var _context$stateToResto;\n\n    var columnVisibilityModelToImport = isUsingColumnVisibilityModel ? (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel : undefined;\n    var initialState = context.stateToRestore.columns;\n\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n\n    var columnsState = createColumnsState({\n      apiRef: apiRef,\n      columnsTypes: columnsTypes,\n      columnsToUpsert: [],\n      initialState: initialState,\n      shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n      currentColumnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n\n    if (initialState != null) {\n      apiRef.current.publishEvent(GridEvents.columnsChange, columnsState.all);\n    }\n\n    return params;\n  }, [apiRef, isUsingColumnVisibilityModel, columnsTypes]);\n  var preferencePanelPreProcessing = React.useCallback(function (initialValue, value) {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$componentsProp;\n\n      var ColumnsPanel = props.components.ColumnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.columnsPanel));\n    }\n\n    return initialValue;\n  }, [props.components.ColumnsPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.columnsPanel]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  /**\n   * EVENTS\n   */\n\n  var handlePreProcessorRegister = React.useCallback(function (name) {\n    if (name !== 'hydrateColumns') {\n      return;\n    }\n\n    logger.info(\"Columns pre-processing have changed, regenerating the columns\");\n    var columnsState = createColumnsState({\n      apiRef: apiRef,\n      columnsTypes: columnsTypes,\n      columnsToUpsert: [],\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState, columnsTypes, isUsingColumnVisibilityModel]);\n  var prevInnerWidth = React.useRef(null);\n\n  var handleGridSizeChange = function handleGridSizeChange(viewportInnerSize) {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsSelector(apiRef.current.state), viewportInnerSize.width));\n    }\n  };\n\n  useGridApiEventHandler(apiRef, GridEvents.preProcessorRegister, handlePreProcessorRegister);\n  useGridApiEventHandler(apiRef, GridEvents.viewportInnerSizeChange, handleGridSizeChange);\n  useGridApiOptionHandler(apiRef, GridEvents.columnVisibilityChange, props.onColumnVisibilityChange);\n  /**\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  var isFirstRender = React.useRef(true);\n  React.useEffect(function () {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    logger.info(\"GridColumns have changed, new length \".concat(props.columns.length));\n    var columnsState = createColumnsState({\n      apiRef: apiRef,\n      columnsTypes: columnsTypes,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, columnsTypes, isUsingColumnVisibilityModel]);\n  React.useEffect(function () {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}","map":{"version":3,"sources":["/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js"],"names":["_extends","React","GridEvents","useGridApiMethod","useGridLogger","gridColumnFieldsSelector","gridColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnsMetaSelector","gridColumnsSelector","gridColumnVisibilityModelSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","useGridApiEventHandler","useGridApiOptionHandler","useGridRegisterPreProcessor","hydrateColumnsWidth","computeColumnTypes","createColumnsState","mergeColumnsState","COLUMNS_DIMENSION_PROPERTIES","GridPreferencePanelsValue","jsx","_jsx","columnsStateInitializer","state","props","apiRef","_props$initialState","_props$initialState$c","_props$initialState2","_ref","_props$columnVisibili","_props$initialState3","_props$initialState3$","isUsingColumnVisibilityModel","columnVisibilityModel","initialState","columns","columnsTypes","columnTypes","columnsState","columnsToUpsert","shouldRegenColumnVisibilityModelFromColumns","currentColumnVisibilityModel","keepOnlyColumnsToUpsert","useGridColumns","_props$initialState4","_props$initialState4$","_props$componentsProp2","logger","useMemo","useRef","current","unstable_updateControlState","stateId","propModel","propOnChange","onColumnVisibilityModelChange","stateSelector","changeEvent","columnVisibilityModelChange","setGridColumnsState","useCallback","debug","setState","forceUpdate","publishEvent","columnsChange","all","getColumn","field","getAllColumns","getVisibleColumns","getColumnsMeta","getColumnIndex","useVisibleColumns","findIndex","col","getColumnPosition","index","setColumnVisibilityModel","model","currentModel","undefined","updateColumns","updateColumn","column","setColumnVisibility","isVisible","_columnVisibilityMode","isCurrentlyVisible","newModel","newColumn","hide","params","colDef","columnVisibilityChange","setColumnIndex","targetIndexPosition","allColumns","oldIndexPosition","updatedColumns","splice","element","getColumnHeaderElement","targetIndex","oldIndex","columnOrderChange","setColumnWidth","width","columnWidthChange","columnApi","stateExportPreProcessing","prevState","columnsStateToExport","columnVisibilityModelToExport","hasHiddenColumns","Object","values","some","value","orderedFields","dimensions","forEach","hasBeenResized","colDefDimensions","propertyName","keys","length","stateRestorePreProcessing","context","_context$stateToResto","columnVisibilityModelToImport","stateToRestore","preferencePanelPreProcessing","initialValue","_props$componentsProp","ColumnsPanel","components","componentsProps","columnsPanel","handlePreProcessorRegister","name","info","prevInnerWidth","handleGridSizeChange","viewportInnerSize","preProcessorRegister","viewportInnerSizeChange","onColumnVisibilityChange","isFirstRender","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsMetaSelector, gridColumnsSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\nimport { hydrateColumnsWidth, computeColumnTypes, createColumnsState, mergeColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  var _props$initialState, _props$initialState$c, _props$initialState2, _ref, _props$columnVisibili, _props$initialState3, _props$initialState3$;\n\n  const isUsingColumnVisibilityModel = !!props.columnVisibilityModel || !!((_props$initialState = props.initialState) != null && (_props$initialState$c = _props$initialState.columns) != null && _props$initialState$c.columnVisibilityModel);\n  const columnsTypes = computeColumnTypes(props.columnTypes);\n  const columnsState = createColumnsState({\n    apiRef,\n    columnsTypes,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.columns,\n    shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n    currentColumnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState\n  });\n};\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\n\nexport function useGridColumns(apiRef, props) {\n  var _props$initialState4, _props$initialState4$, _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const columnsTypes = React.useMemo(() => computeColumnTypes(props.columnTypes), [props.columnTypes]);\n  /**\n   * If `initialState.columns.columnVisibilityModel` or `columnVisibilityModel` was defined during the 1st render, we are directly updating the model\n   * If not, we keep the old behavior and update the `GridColDef.hide` option (which will update the state model through the `GridColDef.hide` => `columnVisibilityModel` sync in `createColumnsState`\n   */\n\n  const isUsingColumnVisibilityModel = React.useRef(!!props.columnVisibilityModel || !!((_props$initialState4 = props.initialState) != null && (_props$initialState4$ = _props$initialState4.columns) != null && _props$initialState4$.columnVisibilityModel)).current;\n  apiRef.current.unstable_updateControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: GridEvents.columnVisibilityModelChange\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent(GridEvents.columnsChange, columnsState.all);\n  }, [logger, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnsMeta = React.useCallback(() => gridColumnsMetaSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnsTypes,\n          columnsToUpsert: [],\n          initialState: undefined,\n          shouldRegenColumnVisibilityModelFromColumns: false,\n          currentColumnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, columnsTypes]);\n  const updateColumns = React.useCallback(columns => {\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsTypes,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: true,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState, columnsTypes]);\n  const updateColumn = React.useCallback(column => apiRef.current.updateColumns([column]), [apiRef]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    // We keep updating the `hide` option of `GridColDef` when not controlling the model to avoid any breaking change.\n    // `updateColumns` take care of updating the model itself if needs be.\n    // TODO v6: stop using the `hide` field even when the model is not defined\n    if (isUsingColumnVisibilityModel) {\n      var _columnVisibilityMode;\n\n      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n      const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;\n\n      if (isVisible !== isCurrentlyVisible) {\n        const newModel = _extends({}, columnVisibilityModel, {\n          [field]: isVisible\n        });\n\n        apiRef.current.setColumnVisibilityModel(newModel);\n      }\n    } else {\n      const column = apiRef.current.getColumn(field);\n\n      const newColumn = _extends({}, column, {\n        hide: !isVisible\n      });\n\n      apiRef.current.updateColumns([newColumn]);\n      const params = {\n        field,\n        colDef: newColumn,\n        isVisible\n      };\n      apiRef.current.publishEvent(GridEvents.columnVisibilityChange, params);\n    }\n  }, [apiRef, isUsingColumnVisibilityModel]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = allColumns.findIndex(col => col === field);\n\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    updatedColumns.splice(targetIndexPosition, 0, updatedColumns.splice(oldIndexPosition, 1)[0]);\n    setGridColumnsState(_extends({}, gridColumnsSelector(apiRef.current.state), {\n      all: updatedColumns\n    }));\n    const params = {\n      field,\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: apiRef.current.getColumn(field),\n      targetIndex: targetIndexPosition,\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent(GridEvents.columnOrderChange, params);\n  }, [apiRef, logger, setGridColumnsState]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const column = apiRef.current.getColumn(field);\n\n    const newColumn = _extends({}, column, {\n      width\n    });\n\n    apiRef.current.updateColumns([newColumn]);\n    apiRef.current.publishEvent(GridEvents.columnWidthChange, {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnsMeta,\n    updateColumn,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnIndex,\n    setColumnWidth\n  };\n  useGridApiMethod(apiRef, columnApi, 'GridColumnApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const columnsStateToExport = {};\n\n    if (isUsingColumnVisibilityModel) {\n      const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n      const hasHiddenColumns = Object.values(columnVisibilityModelToExport).some(value => value === false);\n\n      if (hasHiddenColumns) {\n        columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n      }\n    }\n\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          colDefDimensions[propertyName] = colDef[propertyName];\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, isUsingColumnVisibilityModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const columnVisibilityModelToImport = isUsingColumnVisibilityModel ? (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel : undefined;\n    const initialState = context.stateToRestore.columns;\n\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsTypes,\n      columnsToUpsert: [],\n      initialState,\n      shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n      currentColumnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n\n    if (initialState != null) {\n      apiRef.current.publishEvent(GridEvents.columnsChange, columnsState.all);\n    }\n\n    return params;\n  }, [apiRef, isUsingColumnVisibilityModel, columnsTypes]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$componentsProp;\n\n      const ColumnsPanel = props.components.ColumnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.columnsPanel));\n    }\n\n    return initialValue;\n  }, [props.components.ColumnsPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.columnsPanel]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handlePreProcessorRegister = React.useCallback(name => {\n    if (name !== 'hydrateColumns') {\n      return;\n    }\n\n    logger.info(`Columns pre-processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsTypes,\n      columnsToUpsert: [],\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState, columnsTypes, isUsingColumnVisibilityModel]);\n  const prevInnerWidth = React.useRef(null);\n\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsSelector(apiRef.current.state), viewportInnerSize.width));\n    }\n  };\n\n  useGridApiEventHandler(apiRef, GridEvents.preProcessorRegister, handlePreProcessorRegister);\n  useGridApiEventHandler(apiRef, GridEvents.viewportInnerSizeChange, handleGridSizeChange);\n  useGridApiOptionHandler(apiRef, GridEvents.columnVisibilityChange, props.onColumnVisibilityChange);\n  /**\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsTypes,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, columnsTypes, isUsingColumnVisibilityModel]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}"]},"metadata":{},"sourceType":"module"}