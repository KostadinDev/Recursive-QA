{"ast":null,"code":"import _asyncToGenerator from \"/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@babel/runtime/regenerator/index.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridCellEditing } from './useGridCellEditing.new';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridRowEditing } from './useGridRowEditing.new';\nexport var editingStateInitializer = function editingStateInitializer(state) {\n  return _extends({}, state, {\n    editRows: {}\n  });\n};\nexport var useGridEditing = function useGridEditing(apiRef, props) {\n  useGridCellEditing(apiRef, props);\n  useGridRowEditing(apiRef, props);\n  var debounceMap = React.useRef({});\n  var isCellEditableProp = props.isCellEditable;\n  var isCellEditable = React.useCallback(function (params) {\n    if (params.rowNode.isAutoGenerated) {\n      return false;\n    }\n\n    if (!params.colDef.editable) {\n      return false;\n    }\n\n    if (!params.colDef.renderEditCell) {\n      return false;\n    }\n\n    if (isCellEditableProp) {\n      return isCellEditableProp(params);\n    }\n\n    return true;\n  }, [isCellEditableProp]);\n\n  var maybeDebounce = function maybeDebounce(id, field, debounceMs, callback) {\n    if (!debounceMs) {\n      callback();\n      return;\n    }\n\n    if (!debounceMap.current[id]) {\n      debounceMap.current[id] = {};\n    }\n\n    if (debounceMap.current[id][field]) {\n      var _debounceMap$current$ = _slicedToArray(debounceMap.current[id][field], 1),\n          _timeout = _debounceMap$current$[0];\n\n      clearTimeout(_timeout);\n    } // To run the callback immediatelly without waiting the timeout\n\n\n    var runImmediately = function runImmediately() {\n      var _debounceMap$current$2 = _slicedToArray(debounceMap.current[id][field], 1),\n          timeout = _debounceMap$current$2[0];\n\n      clearTimeout(timeout);\n      callback();\n      delete debounceMap.current[id][field];\n    };\n\n    var timeout = setTimeout(function () {\n      callback();\n      delete debounceMap.current[id][field];\n    }, debounceMs);\n    debounceMap.current[id][field] = [timeout, runImmediately];\n  };\n\n  React.useEffect(function () {\n    var debounces = debounceMap.current;\n    return function () {\n      Object.entries(debounces).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            id = _ref2[0],\n            fields = _ref2[1];\n\n        Object.keys(fields).forEach(function (field) {\n          var _debounces$id$field = _slicedToArray(debounces[id][field], 1),\n              timeout = _debounces$id$field[0];\n\n          clearTimeout(timeout);\n          delete debounces[id][field];\n        });\n      });\n    };\n  }, []);\n  var runPendingEditCellValueMutation = React.useCallback(function (id, field) {\n    if (!debounceMap.current[id]) {\n      return;\n    }\n\n    if (!field) {\n      Object.keys(debounceMap.current[id]).forEach(function (debouncedField) {\n        var _debounceMap$current$3 = _slicedToArray(debounceMap.current[id][debouncedField], 2),\n            runCallback = _debounceMap$current$3[1];\n\n        runCallback();\n      });\n    } else if (debounceMap.current[id][field]) {\n      var _debounceMap$current$4 = _slicedToArray(debounceMap.current[id][field], 2),\n          runCallback = _debounceMap$current$4[1];\n\n      runCallback();\n    }\n  }, []);\n  var setEditCellValue = React.useCallback(function (params) {\n    var id = params.id,\n        field = params.field,\n        debounceMs = params.debounceMs;\n    return new Promise(function (resolve) {\n      maybeDebounce(id, field, debounceMs, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var setEditCellValueToCall, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setEditCellValueToCall = props.editMode === 'row' ? apiRef.current.unstable_setRowEditingEditCellValue : apiRef.current.unstable_setCellEditingEditCellValue; // Check if the cell is in edit mode\n                // By the time this callback runs the user may have cancelled the editing\n\n                if (!(apiRef.current.getCellMode(id, field) === GridCellModes.Edit)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 4;\n                return setEditCellValueToCall(params);\n\n              case 4:\n                result = _context.sent;\n                resolve(result);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })));\n    });\n  }, [apiRef, props.editMode]);\n  var editingSharedApi = {\n    isCellEditable: isCellEditable,\n    setEditCellValue: setEditCellValue,\n    unstable_runPendingEditCellValueMutation: runPendingEditCellValueMutation\n  };\n  useGridApiMethod(apiRef, editingSharedApi, 'EditingApi');\n};","map":{"version":3,"sources":["/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridEditing.new.js"],"names":["_extends","React","useGridApiMethod","useGridCellEditing","GridCellModes","useGridRowEditing","editingStateInitializer","state","editRows","useGridEditing","apiRef","props","debounceMap","useRef","isCellEditableProp","isCellEditable","useCallback","params","rowNode","isAutoGenerated","colDef","editable","renderEditCell","maybeDebounce","id","field","debounceMs","callback","current","timeout","clearTimeout","runImmediately","setTimeout","useEffect","debounces","Object","entries","forEach","fields","keys","runPendingEditCellValueMutation","debouncedField","runCallback","setEditCellValue","Promise","resolve","setEditCellValueToCall","editMode","unstable_setRowEditingEditCellValue","unstable_setCellEditingEditCellValue","getCellMode","Edit","result","editingSharedApi","unstable_runPendingEditCellValueMutation"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridCellEditing } from './useGridCellEditing.new';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridRowEditing } from './useGridRowEditing.new';\nexport const editingStateInitializer = state => _extends({}, state, {\n  editRows: {}\n});\nexport const useGridEditing = (apiRef, props) => {\n  useGridCellEditing(apiRef, props);\n  useGridRowEditing(apiRef, props);\n  const debounceMap = React.useRef({});\n  const {\n    isCellEditable: isCellEditableProp\n  } = props;\n  const isCellEditable = React.useCallback(params => {\n    if (params.rowNode.isAutoGenerated) {\n      return false;\n    }\n\n    if (!params.colDef.editable) {\n      return false;\n    }\n\n    if (!params.colDef.renderEditCell) {\n      return false;\n    }\n\n    if (isCellEditableProp) {\n      return isCellEditableProp(params);\n    }\n\n    return true;\n  }, [isCellEditableProp]);\n\n  const maybeDebounce = (id, field, debounceMs, callback) => {\n    if (!debounceMs) {\n      callback();\n      return;\n    }\n\n    if (!debounceMap.current[id]) {\n      debounceMap.current[id] = {};\n    }\n\n    if (debounceMap.current[id][field]) {\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n    } // To run the callback immediatelly without waiting the timeout\n\n\n    const runImmediately = () => {\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n      callback();\n      delete debounceMap.current[id][field];\n    };\n\n    const timeout = setTimeout(() => {\n      callback();\n      delete debounceMap.current[id][field];\n    }, debounceMs);\n    debounceMap.current[id][field] = [timeout, runImmediately];\n  };\n\n  React.useEffect(() => {\n    const debounces = debounceMap.current;\n    return () => {\n      Object.entries(debounces).forEach(([id, fields]) => {\n        Object.keys(fields).forEach(field => {\n          const [timeout] = debounces[id][field];\n          clearTimeout(timeout);\n          delete debounces[id][field];\n        });\n      });\n    };\n  }, []);\n  const runPendingEditCellValueMutation = React.useCallback((id, field) => {\n    if (!debounceMap.current[id]) {\n      return;\n    }\n\n    if (!field) {\n      Object.keys(debounceMap.current[id]).forEach(debouncedField => {\n        const [, runCallback] = debounceMap.current[id][debouncedField];\n        runCallback();\n      });\n    } else if (debounceMap.current[id][field]) {\n      const [, runCallback] = debounceMap.current[id][field];\n      runCallback();\n    }\n  }, []);\n  const setEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      debounceMs\n    } = params;\n    return new Promise(resolve => {\n      maybeDebounce(id, field, debounceMs, async () => {\n        const setEditCellValueToCall = props.editMode === 'row' ? apiRef.current.unstable_setRowEditingEditCellValue : apiRef.current.unstable_setCellEditingEditCellValue; // Check if the cell is in edit mode\n        // By the time this callback runs the user may have cancelled the editing\n\n        if (apiRef.current.getCellMode(id, field) === GridCellModes.Edit) {\n          const result = await setEditCellValueToCall(params);\n          resolve(result);\n        }\n      });\n    });\n  }, [apiRef, props.editMode]);\n  const editingSharedApi = {\n    isCellEditable,\n    setEditCellValue,\n    unstable_runPendingEditCellValueMutation: runPendingEditCellValueMutation\n  };\n  useGridApiMethod(apiRef, editingSharedApi, 'EditingApi');\n};"]},"metadata":{},"sourceType":"module"}