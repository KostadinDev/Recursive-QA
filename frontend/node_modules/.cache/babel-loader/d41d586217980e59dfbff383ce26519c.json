{"ast":null,"code":"import _slicedToArray from \"/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nexport var useGridRowEditing = function useGridRowEditing(apiRef, props) {\n  var focusTimeout = React.useRef(null);\n  var nextFocusedCell = React.useRef(null);\n  var processRowUpdate = props.processRowUpdate;\n\n  var runIfEditModeIsRow = function runIfEditModeIsRow(callback) {\n    return function () {\n      if (props.editMode === GridEditModes.Row) {\n        callback.apply(void 0, arguments);\n      }\n    };\n  };\n\n  var throwIfNotEditable = React.useCallback(function (id, field) {\n    var params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(\"MUI: The cell with id=\".concat(id, \" and field=\").concat(field, \" is not editable.\"));\n    }\n  }, [apiRef]);\n  var throwIfNotInMode = React.useCallback(function (id, mode) {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(\"MUI: The row with id=\".concat(id, \" is not in \").concat(mode, \" mode.\"));\n    }\n  }, [apiRef]);\n  var handleCellDoubleClick = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    var rowParams = apiRef.current.getRowParams(params.id);\n\n    var newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent(GridEvents.rowEditStart, newParams, event);\n  }, [apiRef]);\n  var handleCellFocusIn = React.useCallback(function (params) {\n    nextFocusedCell.current = params;\n  }, []);\n  var handleCellFocusOut = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(function () {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        var rowParams = apiRef.current.getRowParams(params.id);\n\n        var newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  var handleCellKeyDown = React.useCallback(function (params, event) {\n    if (params.cellMode === GridRowModes.Edit) {\n      var reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        var columnFields = gridColumnFieldsSelector(apiRef).filter(function (field) {\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        var rowParams = apiRef.current.getRowParams(params.id);\n\n        var newParams = _extends({}, rowParams, {\n          reason: reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);\n      }\n    } else if (params.isEditable) {\n      var _reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        _reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        _reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        _reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (_reason) {\n        var _rowParams = apiRef.current.getRowParams(params.id);\n\n        var _newParams = _extends({}, _rowParams, {\n          field: params.field,\n          reason: _reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStart, _newParams, event);\n      }\n    }\n  }, [apiRef]);\n  var handleRowEditStart = React.useCallback(function (params, event) {\n    var id = params.id,\n        field = params.field,\n        reason = params.reason;\n    apiRef.current.startRowEditMode({\n      id: id,\n      fieldToFocus: field\n    });\n\n    if (reason === GridRowEditStartReasons.deleteKeyDown || reason === GridRowEditStartReasons.printableKeyDown) {\n      apiRef.current.setEditCellValue({\n        id: id,\n        field: field,\n        value: ''\n      }, event);\n    }\n  }, [apiRef]);\n  var handleRowEditStop = React.useCallback(function (params) {\n    var id = params.id,\n        reason = params.reason,\n        field = params.field;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    var cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    var ignoreModifications = reason === 'escapeKeyDown';\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(function (fieldProps) {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id: id,\n      ignoreModifications: ignoreModifications,\n      field: field,\n      cellToFocusAfter: cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStart, runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStop, runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);\n  var getRowMode = React.useCallback(function (id) {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  var updateOrDeleteRowState = React.useCallback(function (id, newProps) {\n    apiRef.current.setState(function (state) {\n      var newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  var updateOrDeleteFieldState = React.useCallback(function (id, field, newProps) {\n    apiRef.current.setState(function (state) {\n      var newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], _defineProperty({}, field, _extends({}, newProps)));\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  var startRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n        fieldToFocus = params.fieldToFocus;\n    throwIfNotInMode(id, GridRowModes.View);\n\n    if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n      throw new Error(\"MUI: The cell with id=\".concat(id, \" is already in edit mode.\"));\n    }\n\n    var columnFields = gridColumnFieldsSelector(apiRef);\n    var newProps = columnFields.reduce(function (acc, field) {\n      var cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      acc[field] = {\n        value: apiRef.current.getCellValue(id, field),\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  }, [apiRef, throwIfNotInMode, updateOrDeleteRowState]);\n  var stopRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n        ignoreModifications = params.ignoreModifications,\n        focusedField = params.field,\n        _params$cellToFocusAf = params.cellToFocusAfter,\n        cellToFocusAfter = _params$cellToFocusAf === void 0 ? 'none' : _params$cellToFocusAf;\n    throwIfNotInMode(id, GridRowModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    var updateFocusedCellIfNeeded = function updateFocusedCellIfNeeded() {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      updateFocusedCellIfNeeded();\n      updateOrDeleteRowState(id, null);\n      return;\n    }\n\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var row = apiRef.current.getRow(id);\n    var isSomeFieldProcessingProps = Object.values(editingState[id]).some(function (fieldProps) {\n      return fieldProps.isProcessingProps;\n    });\n\n    if (isSomeFieldProcessingProps) {\n      return;\n    }\n\n    var hasSomeFieldWithError = Object.values(editingState[id]).some(function (fieldProps) {\n      return fieldProps.error;\n    });\n\n    if (hasSomeFieldWithError) {\n      return;\n    }\n\n    var rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          field = _ref2[0],\n          fieldProps = _ref2[1];\n\n      var column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n\n    if (processRowUpdate) {\n      Promise.resolve(processRowUpdate(rowUpdate, row)).then(function (finalRowUpdate) {\n        apiRef.current.updateRows([finalRowUpdate]);\n        updateFocusedCellIfNeeded();\n        updateOrDeleteRowState(id, null);\n      });\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      updateFocusedCellIfNeeded();\n      updateOrDeleteRowState(id, null);\n    }\n  }, [apiRef, processRowUpdate, throwIfNotInMode, updateOrDeleteRowState]);\n  var setRowEditingEditCellValue = React.useCallback(function (params) {\n    var id = params.id,\n        field = params.field,\n        value = params.value;\n    throwIfNotEditable(id, field);\n    var column = apiRef.current.getColumn(field);\n    var row = apiRef.current.getRow(id);\n    var parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    var newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(function (resolve) {\n      var promises = [];\n\n      if (column.preProcessEditCellProps) {\n        var hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        var _editingState$id = editingState[id],\n            otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        var promise = Promise.resolve(column.preProcessEditCellProps({\n          id: id,\n          row: row,\n          props: newProps,\n          hasChanged: hasChanged,\n          otherFieldsProps: otherFieldsProps\n        })).then(function (processedProps) {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            thisField = _ref4[0],\n            fieldProps = _ref4[1];\n\n        if (thisField === field) {\n          return;\n        }\n\n        var fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        var _editingState$id2 = editingState[id],\n            otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        var promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id: id,\n          row: row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps: otherFieldsProps\n        })).then(function (processedProps) {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(function () {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  var editingApi = {\n    getRowMode: getRowMode,\n    startRowEditMode: startRowEditMode,\n    stopRowEditMode: stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n};","map":{"version":3,"sources":["/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.new.js"],"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","React","useGridApiEventHandler","useGridApiOptionHandler","GridEvents","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","gridColumnFieldsSelector","GridRowEditStopReasons","GridRowEditStartReasons","useGridRowEditing","apiRef","props","focusTimeout","useRef","nextFocusedCell","processRowUpdate","runIfEditModeIsRow","callback","editMode","Row","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getRowMode","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","rowEditStart","handleCellFocusIn","handleCellFocusOut","View","setTimeout","_nextFocusedCell$curr","rowFocusOut","rowEditStop","useEffect","clearTimeout","handleCellKeyDown","cellMode","key","escapeKeyDown","enterKeyDown","columnFields","filter","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","ctrlKey","metaKey","altKey","printableKeyDown","deleteKeyDown","handleRowEditStart","startRowEditMode","fieldToFocus","setEditCellValue","value","handleRowEditStop","unstable_runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","editingState","state","Object","values","some","fieldProps","isProcessingProps","stopRowEditMode","cellFocusIn","cellFocusOut","cellKeyDown","onRowEditStart","onRowEditStop","Cell","isEditing","keys","updateOrDeleteRowState","newProps","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","reduce","acc","cellParams","getCellValue","error","setCellFocus","focusedField","updateFocusedCellIfNeeded","unstable_moveFocusToRelativeCell","row","getRow","isSomeFieldProcessingProps","hasSomeFieldWithError","rowUpdate","entries","forEach","column","getColumn","valueSetter","Promise","resolve","then","finalRowUpdate","updateRows","setRowEditingEditCellValue","parsedValue","valueParser","preProcessEditCellProps","promises","hasChanged","_editingState$id","otherFieldsProps","map","promise","processedProps","push","thisField","fieldColumn","_editingState$id2","all","editingApi","unstable_setRowEditingEditCellValue"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nexport const useGridRowEditing = (apiRef, props) => {\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate\n  } = props;\n\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent(GridEvents.rowEditStart, newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStart, newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback((params, event) => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.startRowEditMode({\n      id,\n      fieldToFocus: field\n    });\n\n    if (reason === GridRowEditStartReasons.deleteKeyDown || reason === GridRowEditStartReasons.printableKeyDown) {\n      apiRef.current.setEditCellValue({\n        id,\n        field: field,\n        value: ''\n      }, event);\n    }\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(fieldProps => {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStart, runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStop, runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      fieldToFocus\n    } = params;\n    throwIfNotInMode(id, GridRowModes.View);\n\n    if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n      throw new Error(`MUI: The cell with id=${id} is already in edit mode.`);\n    }\n\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      acc[field] = {\n        value: apiRef.current.getCellValue(id, field),\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  }, [apiRef, throwIfNotInMode, updateOrDeleteRowState]);\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, GridRowModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    const updateFocusedCellIfNeeded = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      updateFocusedCellIfNeeded();\n      updateOrDeleteRowState(id, null);\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      return;\n    }\n\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n\n    if (hasSomeFieldWithError) {\n      return;\n    }\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n\n    if (processRowUpdate) {\n      Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n        apiRef.current.updateRows([finalRowUpdate]);\n        updateFocusedCellIfNeeded();\n        updateOrDeleteRowState(id, null);\n      });\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      updateFocusedCellIfNeeded();\n      updateOrDeleteRowState(id, null);\n    }\n  }, [apiRef, processRowUpdate, throwIfNotInMode, updateOrDeleteRowState]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n};"]},"metadata":{},"sourceType":"module"}