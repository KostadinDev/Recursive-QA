{"ast":null,"code":"import _classCallCheck from \"/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// If no effect ran after this amount of time, we assume that the render was not committed by React\nvar CLEANUP_TIMER_LOOP_MILLIS = 1000;\nexport var TimerBasedCleanupTracking = /*#__PURE__*/function () {\n  function TimerBasedCleanupTracking() {\n    var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : CLEANUP_TIMER_LOOP_MILLIS;\n\n    _classCallCheck(this, TimerBasedCleanupTracking);\n\n    this.timeouts = new Map();\n    this.cleanupTimeout = CLEANUP_TIMER_LOOP_MILLIS;\n    this.cleanupTimeout = timeout;\n  }\n\n  _createClass(TimerBasedCleanupTracking, [{\n    key: \"register\",\n    value: function register(object, unsubscribe, unregisterToken) {\n      var _this = this;\n\n      if (!this.timeouts) {\n        this.timeouts = new Map();\n      }\n\n      var timeout = setTimeout(function () {\n        if (typeof unsubscribe === 'function') {\n          unsubscribe();\n        }\n\n        _this.timeouts.delete(unregisterToken.cleanupToken);\n      }, this.cleanupTimeout);\n      this.timeouts.set(unregisterToken.cleanupToken, timeout);\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister(unregisterToken) {\n      var timeout = this.timeouts.get(unregisterToken.cleanupToken);\n\n      if (timeout) {\n        this.timeouts.delete(unregisterToken.cleanupToken);\n        clearTimeout(timeout);\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this2 = this;\n\n      if (this.timeouts) {\n        this.timeouts.forEach(function (value, key) {\n          _this2.unregister({\n            cleanupToken: key\n          });\n        });\n        this.timeouts = undefined;\n      }\n    }\n  }]);\n\n  return TimerBasedCleanupTracking;\n}();","map":{"version":3,"sources":["/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@mui/x-data-grid/utils/cleanupTracking/TimerBasedCleanupTracking.js"],"names":["CLEANUP_TIMER_LOOP_MILLIS","TimerBasedCleanupTracking","timeout","timeouts","Map","cleanupTimeout","object","unsubscribe","unregisterToken","setTimeout","delete","cleanupToken","set","get","clearTimeout","forEach","value","key","unregister","undefined"],"mappings":";;AAAA;AACA,IAAMA,yBAAyB,GAAG,IAAlC;AACA,WAAaC,yBAAb;AACE,uCAAiD;AAAA,QAArCC,OAAqC,uEAA3BF,yBAA2B;;AAAA;;AAC/C,SAAKG,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACA,SAAKC,cAAL,GAAsBL,yBAAtB;AACA,SAAKK,cAAL,GAAsBH,OAAtB;AACD;;AALH;AAAA;AAAA,WAOE,kBAASI,MAAT,EAAiBC,WAAjB,EAA8BC,eAA9B,EAA+C;AAAA;;AAC7C,UAAI,CAAC,KAAKL,QAAV,EAAoB;AAClB,aAAKA,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACD;;AAED,UAAMF,OAAO,GAAGO,UAAU,CAAC,YAAM;AAC/B,YAAI,OAAOF,WAAP,KAAuB,UAA3B,EAAuC;AACrCA,UAAAA,WAAW;AACZ;;AAED,QAAA,KAAI,CAACJ,QAAL,CAAcO,MAAd,CAAqBF,eAAe,CAACG,YAArC;AACD,OANyB,EAMvB,KAAKN,cANkB,CAA1B;AAOA,WAAKF,QAAL,CAAcS,GAAd,CAAkBJ,eAAe,CAACG,YAAlC,EAAgDT,OAAhD;AACD;AApBH;AAAA;AAAA,WAsBE,oBAAWM,eAAX,EAA4B;AAC1B,UAAMN,OAAO,GAAG,KAAKC,QAAL,CAAcU,GAAd,CAAkBL,eAAe,CAACG,YAAlC,CAAhB;;AAEA,UAAIT,OAAJ,EAAa;AACX,aAAKC,QAAL,CAAcO,MAAd,CAAqBF,eAAe,CAACG,YAArC;AACAG,QAAAA,YAAY,CAACZ,OAAD,CAAZ;AACD;AACF;AA7BH;AAAA;AAAA,WA+BE,iBAAQ;AAAA;;AACN,UAAI,KAAKC,QAAT,EAAmB;AACjB,aAAKA,QAAL,CAAcY,OAAd,CAAsB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACpC,UAAA,MAAI,CAACC,UAAL,CAAgB;AACdP,YAAAA,YAAY,EAAEM;AADA,WAAhB;AAGD,SAJD;AAKA,aAAKd,QAAL,GAAgBgB,SAAhB;AACD;AACF;AAxCH;;AAAA;AAAA","sourcesContent":["// If no effect ran after this amount of time, we assume that the render was not committed by React\nconst CLEANUP_TIMER_LOOP_MILLIS = 1000;\nexport class TimerBasedCleanupTracking {\n  constructor(timeout = CLEANUP_TIMER_LOOP_MILLIS) {\n    this.timeouts = new Map();\n    this.cleanupTimeout = CLEANUP_TIMER_LOOP_MILLIS;\n    this.cleanupTimeout = timeout;\n  }\n\n  register(object, unsubscribe, unregisterToken) {\n    if (!this.timeouts) {\n      this.timeouts = new Map();\n    }\n\n    const timeout = setTimeout(() => {\n      if (typeof unsubscribe === 'function') {\n        unsubscribe();\n      }\n\n      this.timeouts.delete(unregisterToken.cleanupToken);\n    }, this.cleanupTimeout);\n    this.timeouts.set(unregisterToken.cleanupToken, timeout);\n  }\n\n  unregister(unregisterToken) {\n    const timeout = this.timeouts.get(unregisterToken.cleanupToken);\n\n    if (timeout) {\n      this.timeouts.delete(unregisterToken.cleanupToken);\n      clearTimeout(timeout);\n    }\n  }\n\n  reset() {\n    if (this.timeouts) {\n      this.timeouts.forEach((value, key) => {\n        this.unregister({\n          cleanupToken: key\n        });\n      });\n      this.timeouts = undefined;\n    }\n  }\n\n}"]},"metadata":{},"sourceType":"module"}