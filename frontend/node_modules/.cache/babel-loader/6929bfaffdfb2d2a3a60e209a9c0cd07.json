{"ast":null,"code":"import _toConsumableArray from \"/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel } from './gridFilterUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var filterStateInitializer = function filterStateInitializer(state, props, apiRef) {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  var filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport var useGridFilter = function useGridFilter(apiRef, props) {\n  var _props$componentsProp2;\n\n  var logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_updateControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: GridEvents.filterModelChange\n  });\n  /**\n   * API METHODS\n   */\n\n  var applyFilters = React.useCallback(function () {\n    apiRef.current.setState(function (state) {\n      var filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      var isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      var filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters: isRowMatchingFilters\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent(GridEvents.visibleRowsSet);\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.filterMode]);\n  var upsertFilterItem = React.useCallback(function (item) {\n    var filterModel = gridFilterModelSelector(apiRef);\n\n    var items = _toConsumableArray(filterModel.items);\n\n    var itemIndex = items.findIndex(function (filterItem) {\n      return filterItem.id === item.id;\n    });\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items: items\n    }));\n  }, [apiRef]);\n  var deleteFilterItem = React.useCallback(function (itemToDelete) {\n    var filterModel = gridFilterModelSelector(apiRef);\n    var items = filterModel.items.filter(function (item) {\n      return item.id !== itemToDelete.id;\n    });\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items: items\n    }));\n  }, [apiRef]);\n  var showFilterPanel = React.useCallback(function (targetColumnField) {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      var filterModel = gridFilterModelSelector(apiRef);\n      var filterItemsWithValue = filterModel.items.filter(function (item) {\n        return item.value !== undefined;\n      });\n      var newFilterItems;\n      var filterItemOnTarget = filterItemsWithValue.find(function (item) {\n        return item.columnField === targetColumnField;\n      });\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [{\n          columnField: targetColumnField\n        }];\n      } else {\n        newFilterItems = [].concat(_toConsumableArray(filterItemsWithValue), [{\n          columnField: targetColumnField\n        }]);\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  var hideFilterPanel = React.useCallback(function () {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  var setFilterLinkOperator = React.useCallback(function (linkOperator) {\n    var filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator: linkOperator\n    }));\n  }, [apiRef]);\n  var setFilterModel = React.useCallback(function (model) {\n    var currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.setState(mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef));\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  var getVisibleRowModels = React.useCallback(function () {\n    var visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(function (row) {\n      return [row.id, row.model];\n    }));\n  }, [apiRef]);\n  var filterApi = {\n    setFilterLinkOperator: setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem: deleteFilterItem,\n    upsertFilterItem: upsertFilterItem,\n    setFilterModel: setFilterModel,\n    showFilterPanel: showFilterPanel,\n    hideFilterPanel: hideFilterPanel,\n    getVisibleRowModels: getVisibleRowModels\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  var stateExportPreProcessing = React.useCallback(function (prevState) {\n    var filterModelToExport = gridFilterModelSelector(apiRef);\n\n    if (filterModelToExport.items.length === 0 && filterModelToExport.linkOperator === getDefaultGridFilterModel().linkOperator) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef]);\n  var stateRestorePreProcessing = React.useCallback(function (params, context) {\n    var _context$stateToResto;\n\n    var filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.setState(mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef));\n    return _extends({}, params, {\n      callbacks: [].concat(_toConsumableArray(params.callbacks), [apiRef.current.unstable_applyFilters])\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  var preferencePanelPreProcessing = React.useCallback(function (initialValue, value) {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n\n      var FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  var flatFilteringMethod = React.useCallback(function (params) {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      var rowIds = gridRowIdsSelector(apiRef);\n      var filteredRowsLookup = {};\n\n      for (var i = 0; i < rowIds.length; i += 1) {\n        var rowId = rowIds[i];\n        filteredRowsLookup[rowId] = params.isRowMatchingFilters(rowId);\n      }\n\n      return {\n        filteredRowsLookup: filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  var handleColumnsChange = React.useCallback(function () {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    var filterModel = gridFilterModelSelector(apiRef);\n    var filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    var newFilterItems = filterModel.items.filter(function (item) {\n      return item.columnField && filterableColumnsLookup[item.columnField];\n    });\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  var handleStrategyProcessorChange = React.useCallback(function (methodName) {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.rowsSet, apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, GridEvents.rowExpansionChange, apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, GridEvents.columnsChange, handleColumnsChange);\n  useGridApiEventHandler(apiRef, GridEvents.activeStrategyProcessorChange, handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(function () {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(function () {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"sources":["/Users/kostadindev/PycharmProjects/rfc_qa_generation/recursive-qa/frontend/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"names":["_extends","React","GridEvents","GridFeatureModeConstant","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridFilterableColumnLookupSelector","GridPreferencePanelsValue","getDefaultGridFilterModel","gridFilterModelSelector","gridVisibleSortedRowEntriesSelector","useFirstRender","gridRowIdsSelector","useGridRegisterPreProcessor","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","jsx","_jsx","filterStateInitializer","state","props","apiRef","_ref","_props$filterModel","_props$initialState","_props$initialState$f","filterModel","initialState","filter","disableMultipleColumnsFiltering","visibleRowsLookup","filteredDescendantCountLookup","useGridFilter","_props$componentsProp2","logger","current","unstable_updateControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","filterModelChange","applyFilters","useCallback","setState","instanceId","isRowMatchingFilters","filterMode","client","filteringResult","unstable_applyStrategyProcessor","publishEvent","visibleRowsSet","forceUpdate","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","debug","filterItemsWithValue","value","undefined","newFilterItems","filterItemOnTarget","find","columnField","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLinkOperator","linkOperator","model","currentModel","unstable_applyFilters","getVisibleRowModels","visibleSortedRows","Map","map","row","filterApi","stateExportPreProcessing","prevState","filterModelToExport","stateRestorePreProcessing","params","context","_context$stateToResto","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","_props$componentsProp","FilterPanel","components","componentsProps","filterPanel","flatFilteringMethod","rowIds","filteredRowsLookup","i","rowId","handleColumnsChange","filterableColumnsLookup","handleStrategyProcessorChange","methodName","rowsSet","rowExpansionChange","columnsChange","activeStrategyProcessorChange","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPreProcessor } from '../../core/preProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel } from './gridFilterUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_updateControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: GridEvents.filterModelChange\n  });\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent(GridEvents.visibleRowsSet);\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.filterMode]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }));\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }));\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => item.value !== undefined);\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [{\n          columnField: targetColumnField\n        }];\n      } else {\n        newFilterItems = [...filterItemsWithValue, {\n          columnField: targetColumnField\n        }];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLinkOperator = React.useCallback(linkOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback(model => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.setState(mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef));\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getVisibleRowModels = React.useCallback(() => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(row => [row.id, row.model]));\n  }, [apiRef]);\n  const filterApi = {\n    setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    getVisibleRowModels\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n\n    if (filterModelToExport.items.length === 0 && filterModelToExport.linkOperator === getDefaultGridFilterModel().linkOperator) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.setState(mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n\n      const FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      const rowIds = gridRowIdsSelector(apiRef);\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        filteredRowsLookup[rowId] = params.isRowMatchingFilters(rowId);\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.rowsSet, apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, GridEvents.rowExpansionChange, apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, GridEvents.columnsChange, handleColumnsChange);\n  useGridApiEventHandler(apiRef, GridEvents.activeStrategyProcessorChange, handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"]},"metadata":{},"sourceType":"module"}